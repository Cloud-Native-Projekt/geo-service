## From the example docker-compose.yaml file provided by uv
## https://github.com/astral-sh/uv-docker-example
## https://github.com/astral-sh/uv-docker-example/blob/main/compose.yml

services:
    geo_service:
        container_name: geo_service
        # Build the image from the Dockerfile in the current directory
        environment:
            DATABASE_URL: postgresql+asyncpg://geo_user:geo_pass@postgis_db:5432/geo
            TEST_DATABASE_URL: postgresql+asyncpg://geo_user:geo_pass@postgis_db:5432/geo_test
        depends_on:
            postgis_db:
                condition: service_healthy
        build:
            context: .
            dockerfile: geo_service/Dockerfile
        ports:
            - "8000:8000" # Host the FastAPI application on port 8000
        networks:
            - microservices_network
        develop:
            # Create a `watch` configuration to update the app
            # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
            watch:
                # Sync the working directory with the `/app` directory in the container
                - action: rebuild
                  path: .
                  target: /app
                  # Exclude the project virtual environment â€” it could be for a
                  # different platform in the container
                  ignore:
                      - .venv/
                # Rebuild the image if dependencies change by checking uv.lock
                - action: rebuild
                  path: ./uv.lock
    postgis_db:
        image: postgis/postgis:15-3.4
        container_name: geo_postgres
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: geo
        ports:
            - "5432:5432"
        volumes:
            - postgis_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            retries: 5

volumes:
    postgis_data:
networks:
    microservices_network:
        name: microservices_network
        driver: bridge
